<?php return array (
  'unique_key' => 'name',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'PluginEvents' => 
    array (
      '3df75b287dffff2008d6078f8cca12e6' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnManagerPageBeforeRender","priority":0,"propertyset":0}',
        'guid' => '34e69bce5263865cfb2a3245ba5abb49',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnManagerPageBeforeRender',
        ),
        'signature' => '2e3db0b2c22fe5cb624f7761ab83d57b',
      ),
      '29cc7623419b48be4343efff191c0704' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnRichTextEditorRegister","priority":0,"propertyset":0}',
        'guid' => 'cd718629abab795e1af8943e2c8abec9',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnRichTextEditorRegister',
        ),
        'signature' => '6020c4ec34de2334e7e11747b8089c3c',
      ),
      '3dc3729424cba42eaff82e22c7baac44' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnSnipFormPrerender","priority":0,"propertyset":0}',
        'guid' => 'ff3a99d4af610f8cd0721fa2814976bb',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnSnipFormPrerender',
        ),
        'signature' => '2bea23809e06897bb06c7ebd8c786ab8',
      ),
      '43bc5d4839e47850597dcccd61d63276' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnTempFormPrerender","priority":0,"propertyset":0}',
        'guid' => '5684ebd825bffed2242e4178e4732a75',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnTempFormPrerender',
        ),
        'signature' => '72385af8e0611e2a7e3cad04ab5f8580',
      ),
      '46574c6276270b22826767f028d5c7ae' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnChunkFormPrerender","priority":0,"propertyset":0}',
        'guid' => 'b3aef225215eb37d1e501f72731d2881',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnChunkFormPrerender',
        ),
        'signature' => '58058ec139600128f91255f4e38b67a6',
      ),
      'df7d97a91522de707d0fd962de968e9b' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnPluginFormPrerender","priority":0,"propertyset":0}',
        'guid' => 'f3b4d413163706da8dab76c8061c1933',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnPluginFormPrerender',
        ),
        'signature' => 'e0360ba9b32e9cd5475dfa6b5436a12f',
      ),
      '300e81f3276b2e53adeb90d392e601e7' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnFileCreateFormPrerender","priority":0,"propertyset":0}',
        'guid' => 'ac8721fdb913ec0b9fd42edf05b78ddb',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnFileCreateFormPrerender',
        ),
        'signature' => '34024910bf34b79d8d0cc925b4e11211',
      ),
      '00e507ff2148d596d1292c15d23718be' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnFileEditFormPrerender","priority":0,"propertyset":0}',
        'guid' => '122410dc096627b700cb6531b67637de',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnFileEditFormPrerender',
        ),
        'signature' => 'a9e1f9908f127f8c93395cb7ebdc037f',
      ),
      'c42dc4fdda6a336587e36cead3d2299a' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnDocFormPrerender","priority":0,"propertyset":0}',
        'guid' => 'b787e2e0219ce7f6d803c4c1d51b384a',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnDocFormPrerender',
        ),
        'signature' => '76b4f4a957b291b4bd7f14c8e4ebddb8',
      ),
      'd27829bdcc4672d93df8bc6782c72bd9' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnPluginSave","priority":0,"propertyset":0}',
        'guid' => '24262eeab7a347fc9059c2ce04359f49',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnPluginSave',
        ),
        'signature' => '150a7141542edcc7d11821b235de1ace',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => false,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'simpleacecodeeditor',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"simpleacecodeeditor-1.4.4-pl\\/modPlugin\\/38dc433edf6f369d1b6b9bb63df8379a\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"simpleacecodeeditor"}',
    ),
    1 => 
    array (
      'type' => 'php',
      'body' => '{"source":"simpleacecodeeditor-1.4.4-pl\\/modPlugin\\/38dc433edf6f369d1b6b9bb63df8379a.transport.resolver.resolver","name":"transport.resolver","type":"php"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '7c101ab4a767f0daf7d3650878721b7f',
  'package' => 'modx',
  'class' => 'modPlugin',
  'signature' => '38dc433edf6f369d1b6b9bb63df8379a',
  'native_key' => 1,
  'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"SimpleAceCodeEditor","description":"Ace Code Editor *simple* integration - 1.4.4-pl","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\r\\n * Simple Ace Source Editor Plugin\\r\\n * https:\\/\\/github.com\\/Indigo744\\/Modx-Revo-Simple-Ace-Code-Editor\\r\\n *\\r\\n * Create plugin and paste this code or install it from Package Manager\\r\\n * Set which_element_editor system option to SimpleAceCodeEditor\\r\\n *\\r\\n * Events: OnManagerPageBeforeRender, OnRichTextEditorRegister, OnSnipFormPrerender,\\r\\n * OnTempFormPrerender, OnChunkFormPrerender, OnPluginFormPrerender,\\r\\n * OnFileCreateFormPrerender, OnFileEditFormPrerender, OnDocFormPrerender\\r\\n * and OnPluginSave to force cache refresh\\r\\n * \\r\\n * Properties:\\r\\n *\\r\\n *     AcePath: URL or path to ACE javascript file\\r\\n *              default: https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.3.3\\/ace.js\\r\\n *\\r\\n *     Theme: editor theme name (you can test them all here: https:\\/\\/ace.c9.io\\/build\\/kitchen-sink.html)\\r\\n *            default: monokai\\r\\n *\\r\\n *     ReplaceCTRLDKbdShortcut: Replace the CTRL-D (or CMD-D) keyboard shortcut to perform a more sensible action\\r\\n *                              duplicate the current line or selection (instead of deleting, which is the default behavior)\\r\\n *                              default: true\\r\\n *\\r\\n *     Autocompletion: Enable Auto-completion: none, basic (show on CTRL-Space) or live (show on typing)\\r\\n *                     Note that \\"ext-language_tools.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-language_tools.js)\\r\\n *                     default: basic\\r\\n *\\r\\n *     SettingsMenu: Add a settings menu accessible with CTR-Q (or CMD-Q)\\r\\n *                   Note that \\"ext-settings_menu.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-settings_menu.js)\\r\\n *                   default: false\\r\\n *\\r\\n *     Spellcheck: Enable spell-check\\r\\n *                 Note that \\"ext-spellcheck.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-spellcheck.js)\\r\\n *                 default: false\\r\\n *\\r\\n *     EmmetPath: URL or path to Emmet js file\\r\\n *                For more information, see https:\\/\\/github.com\\/cloud9ide\\/emmet-core\\r\\n *                default: https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\r\\n *\\r\\n *     Emmet: Enable Emmet\\r\\n *            Note that Emmet JS file must be loaded first (see EmmetPath, it must be correctly set)\\r\\n *            Note that \\"ext-emmet.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-emmet.js)\\r\\n *            It is recommended to disable ReplaceCTRLDKbdShortcut property when using Emmet (as it replace an Emmet shortcut CTRL-D)\\r\\n *            default: false\\r\\n *\\r\\n *     AcePrintMarginColumn: Print margin column position\\r\\n *                           Set the character position of the print margin (for instance useful if you like to code with 80 chars wide max)\\r\\n *                           Set to 0 to disable it completely\\r\\n *                           default: 0 (disabled)\\r\\n *\\r\\n *     ChunkDetectMIMEShebang: Enable \'shebang-style\' MIME detection for chunks (in description or in the first line of chunk content)\\r\\n *                             This is particularly useful if your chunk contains directly JS, or SASS, or anything different than HTML...\\r\\n *                             Supported MIME values are text\\/x-smarty, text\\/html, application\\/xhtml+xml, text\\/css, text\\/x-scss, \\r\\n *                                                       text\\/x-sass, text\\/x-less, image\\/svg+xml, application\\/xml, text\\/xml, text\\/javascript, \\r\\n *                                                       application\\/javascript, application\\/json, text\\/x-php, application\\/x-php, text\\/x-sql, \\r\\n *                                                       text\\/x-markdown, text\\/plain, text\\/x-twig\\r\\n *                             default: true\\r\\n * \\r\\n *\\r\\n * If you want to edit a property, create your own property set first.\\r\\n *\\r\\n *\\r\\n * Based on Ace Source Editor Plugin by Danil Kostin\\r\\n *\\r\\n * @package SimpleAceCodeEditor\\r\\n *\\r\\n * @var array $scriptProperties\\r\\n * @var Ace $ace\\r\\n *\\/\\r\\n\\r\\n\\/** Package information (set at build) **\\/\\r\\n$pluginName = \'SimpleAceCodeEditor\';\\r\\n$pluginVersion = \'1.4.4-pl\';\\r\\n\\r\\n\\/** Force mgr refresh on plugin save **\\/\\r\\nif ($modx->event->name == \'OnPluginSave\') {\\r\\n    if ($plugin->get(\'name\') === $pluginName) {\\r\\n        $modx->cacheManager->refresh(array(\\r\\n            \'context_settings\' => array(\'contexts\' => array(\'mgr\'))\\r\\n        ));\\r\\n    }\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Register RTE **\\/\\r\\nif ($modx->event->name == \'OnRichTextEditorRegister\') {\\r\\n    $modx->event->output($pluginName);\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Check if RTE (element) setting is set to this **\\/\\r\\nif ($modx->getOption(\'which_element_editor\', null) !== $pluginName) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Get properties **\\/\\r\\n$AcePath = $modx->getoption(\'AcePath\', $scriptProperties, $modx->getOption($pluginName . \'.AcePath\', null, \\"https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.3.3\\/ace.js\\"));\\r\\n$EmmetPath = $modx->getoption(\'EmmetPath\', $scriptProperties, $modx->getOption($pluginName . \'.EmmetPath\', null, \\"https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\"));\\r\\n$AceTheme = $modx->getoption(\'Theme\', $scriptProperties, $modx->getOption($pluginName . \'.Theme\', null, \'monokai\'));\\r\\n$AceReplaceCTRLDKbdShortcut = $modx->getoption(\'ReplaceCTRLDKbdShortcut\', $scriptProperties, $modx->getOption($pluginName . \'.ReplaceCTRDKbdShortcut\', null, true));\\r\\n$AceAutocompletion = $modx->getoption(\'Autocompletion\', $scriptProperties, $modx->getOption($pluginName . \'.Autocompletion\', null, \'basic\'));\\r\\n$AceSettingsMenu = $modx->getoption(\'SettingsMenu\', $scriptProperties, $modx->getOption($pluginName . \'.SettingsMenu\', null, false));\\r\\n$AceSpellcheck = $modx->getoption(\'Spellcheck\', $scriptProperties, $modx->getOption($pluginName . \'.Spellcheck\', null, false));\\r\\n$AceEmmet = $modx->getoption(\'Emmet\', $scriptProperties, $modx->getOption($pluginName . \'.Emmet\', null, false));\\r\\n$AcePrintMarginColumn = $modx->getoption(\'AcePrintMarginColumn\', $scriptProperties, $modx->getOption($pluginName . \'.AcePrintMarginColumn\', null, 0));\\r\\n$AceChunkDetectMIMEShebang = $modx->getoption(\'ChunkDetectMIMEShebang\', $scriptProperties, $modx->getOption($pluginName . \'.ChunkDetectMIMEShebang\', null, true));\\r\\n\\r\\n\\/** Inits script options **\\/\\r\\n$AceAssetsUrl = $modx->getOption(\'assets_url\') . \'components\\/\' . strtolower($pluginName);\\r\\n$AceBasePath = dirname($AcePath);\\r\\n$scriptPaths = array($AcePath);\\r\\n$editorOptions = array();\\r\\n$rendererOptions = array(\\r\\n    \'theme\' => \\"ace\\/theme\\/$AceTheme\\",\\r\\n    \'showPrintMargin\' => $AcePrintMarginColumn > 0 ? true : false,\\r\\n    \'printMarginColumn\' => $AcePrintMarginColumn > 0 ? $AcePrintMarginColumn : 80,\\r\\n);\\r\\n$editorAdditionalScript = \\"\\\\n\\";\\r\\n\\r\\n\\/** Handle proper CTRL-D **\\/\\r\\nif ($AceReplaceCTRLDKbdShortcut == true) {\\r\\n    $editorAdditionalScript .= <<<JSSCRIPT\\r\\n        editor.commands.removeCommand(\'del\');\\r\\n        editor.commands.addCommand({\\r\\n            name: \\"del\\",\\r\\n            bindKey: {win: \\"Delete\\",  mac: \\"Delete|Shift-Delete\\"},\\r\\n            exec: function(editor) { editor.remove(\\"right\\"); },\\r\\n            multiSelectAction: \\"forEach\\",\\r\\n            scrollIntoView: \\"cursor\\"\\r\\n        });\\r\\n        editor.commands.addCommand({\\r\\n            name: \\"Duplicate Selection\\",\\r\\n            bindKey: {win: \\"Ctrl-D\\", mac: \\"Command-D\\"},\\r\\n            exec: function(editor) { editor.duplicateSelection(); },\\r\\n            scrollIntoView: \\"cursor\\",\\r\\n            multiSelectAction: \\"forEach\\"\\r\\n        });\\r\\nJSSCRIPT;\\r\\n}\\r\\n\\r\\n\\/** Handle autocompletion extension **\\/\\r\\nif ($AceAutocompletion === \'live\' || $AceAutocompletion === \'basic\') {\\r\\n    $editorOptions[\'enableBasicAutocompletion\'] = true;\\r\\n    $editorOptions[\'enableLiveAutocompletion\'] = $AceAutocompletion === \'live\';\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-language_tools.js\\");\\r\\n}\\r\\n\\r\\n\\/** Handle settings_menu extension **\\/\\r\\nif ($AceSettingsMenu == true) {\\r\\n    $editorAdditionalScript .= <<<JSSCRIPT\\r\\n        var RequiresettingsMenu = ace.require(\'ace\\/ext\\/settings_menu\');\\r\\n        if (RequiresettingsMenu) {\\r\\n            \\/\\/ Init with current editor\\r\\n            RequiresettingsMenu.init(editor);\\r\\n            \\/\\/ Set CTRL-Q shortcut\\r\\n        \\teditor.commands.addCommands([{\\r\\n        \\t\\tname: \\"showSettingsMenu\\",\\r\\n        \\t\\tbindKey: {win: \\"Ctrl-q\\", mac: \\"Ctrl-q\\"},\\r\\n        \\t\\texec: function(editor) {\\r\\n        \\t\\t\\teditor.showSettingsMenu();\\r\\n        \\t\\t},\\r\\n        \\t\\treadOnly: true\\r\\n        \\t}]);\\r\\n        }\\r\\nJSSCRIPT;\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-settings_menu.js\\");\\r\\n} \\r\\n\\r\\n\\/** Handle Spellcheck extension **\\/\\r\\nif ($AceSpellcheck == true) {\\r\\n    $editorOptions[\'spellcheck\'] = true;\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-spellcheck.js\\");\\r\\n} \\r\\n\\r\\n\\/** Handle Emmet extension **\\/\\r\\nif ($AceEmmet == true) {\\r\\n    $editorOptions[\'enableEmmet\'] = true;\\r\\n    array_push($scriptPaths, $EmmetPath);\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-emmet.js\\");\\r\\n}\\r\\n\\r\\n\\/** Corresponding arrays **\\/\\r\\n$mimeTypeToMode = array(\\r\\n    \'text\\/x-smarty\'                     => \'smarty\',\\r\\n    \'text\\/html\'                         => \'html\',\\r\\n    \'application\\/xhtml+xml\'             => \'html\',\\r\\n    \'text\\/css\'                          => \'css\',\\r\\n    \'text\\/x-scss\'                       => \'scss\',\\r\\n    \'text\\/x-sass\'                       => \'scss\',\\r\\n    \'text\\/x-less\'                       => \'less\',\\r\\n    \'image\\/svg+xml\'                     => \'svg\',\\r\\n    \'application\\/xml\'                   => \'xml\',\\r\\n    \'text\\/xml\'                          => \'xml\',\\r\\n    \'text\\/javascript\'                   => \'javascript\',\\r\\n    \'application\\/javascript\'            => \'javascript\',\\r\\n    \'application\\/json\'                  => \'json\',\\r\\n    \'text\\/x-php\'                        => \'php\',\\r\\n    \'application\\/x-php\'                 => \'php\',\\r\\n    \'text\\/x-sql\'                        => \'sql\',\\r\\n    \'application\\/sql\'                   => \'sql\',\\r\\n    \'text\\/x-markdown\'                   => \'markdown\',\\r\\n    \'text\\/markdown\'                     => \'markdown\',\\r\\n    \'text\\/plain\'                        => \'text\',\\r\\n    \'text\\/x-twig\'                       => \'twig\',\\r\\n    \'application\\/x-extension-htaccess\'  => \'apache_conf\',\\r\\n    \'application\\/vnd.coffeescript\'      => \'coffee\',\\r\\n    \'application\\/x-typescript\'          => \'typescript\',\\r\\n    \'text\\/x-ini\'                        => \'ini\',\\r\\n    \'text\\/x-ejs\'                        => \'ejs\',\\r\\n    \'application\\/x-perl\'                => \'perl\',\\r\\n);\\r\\n\\r\\n$extensionMap = array(\\r\\n    \'tpl\'       => \'text\\/html\',\\r\\n    \'htm\'       => \'text\\/html\',\\r\\n    \'html\'      => \'text\\/html\',\\r\\n    \'css\'       => \'text\\/css\',\\r\\n    \'scss\'      => \'text\\/x-scss\',\\r\\n    \'sass\'      => \'text\\/x-sass\',\\r\\n    \'less\'      => \'text\\/x-less\',\\r\\n    \'svg\'       => \'image\\/svg+xml\',\\r\\n    \'xml\'       => \'application\\/xml\',\\r\\n    \'xsl\'       => \'application\\/xml\',\\r\\n    \'js\'        => \'application\\/javascript\',\\r\\n    \'json\'      => \'application\\/json\',\\r\\n    \'php\'       => \'application\\/x-php\',\\r\\n    \'sql\'       => \'text\\/x-sql\',\\r\\n    \'txt\'       => \'text\\/plain\',\\r\\n    \'htaccess\'  => \'application\\/x-extension-htaccess\',\\r\\n    \'coffee\'    => \'application\\/vnd.coffeescript\',\\r\\n    \'litcoffee\' => \'application\\/vnd.coffeescript\',\\r\\n    \'ts\'        => \'application\\/x-typescript\',\\r\\n    \'ini\'       => \'text\\/x-ini\',\\r\\n    \'ejs\'       => \'text\\/x-ejs\',\\r\\n    \'md\'        => \'text\\/markdown\',\\r\\n    \'sql\'       => \'application\\/x-perl\',\\r\\n);\\r\\n\\r\\n\\r\\n\\/** Adapt field\\/mime depending on event type **\\/\\r\\n$mimeType = false;\\r\\n$field = false;\\r\\n$mixedMode = true;\\r\\nswitch ($modx->event->name) {\\r\\n    case \'OnSnipFormPrerender\':\\r\\n        \\/\\/ Snippets are PHP\\r\\n        $field = \'modx-snippet-snippet\';\\r\\n        $mimeType = \'application\\/x-php\';\\r\\n        $mixedMode = false;\\r\\n        break;\\r\\n    case \'OnTempFormPrerender\':\\r\\n        \\/\\/ Templates are HTML\\r\\n        $field = \'modx-template-content\';\\r\\n        $mimeType = \'text\\/html\';\\r\\n        $mixedMode = true;\\r\\n        break;\\r\\n    case \'OnChunkFormPrerender\':\\r\\n        \\/\\/ Chunks are HTML\\r\\n        \\/\\/ unless it is static then we look at the file extension\\r\\n        \\/\\/ unless it a proper mime type is set in description or first line of chunk!\\r\\n        $field = \'modx-chunk-snippet\';\\r\\n        $mixedMode = true;\\r\\n        \\r\\n        if ($modx->controller->chunk) {\\r\\n            \\/** Try to detect shebang **\\/\\r\\n            if ($AceChunkDetectMIMEShebang) {\\r\\n                \\/\\/ Retrieve description\\r\\n                $chunkDescription = $modx->controller->chunk->get(\'description\');\\r\\n                \\/\\/ Retrieve first line of chunk content\\r\\n                $chunkContentFirstLine = strtok($modx->controller->chunk->getContent(), \\"\\\\n\\");\\r\\n                \\/\\/ Loop through known mime\\r\\n                foreach($mimeTypeToMode as $currMimeType => $mode) {\\r\\n                    if (strpos($chunkDescription, $currMimeType) !== FALSE || \\r\\n                        strpos($chunkContentFirstLine, $currMimeType) !== FALSE) \\r\\n                    {\\r\\n                        $mimeType = $currMimeType;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            \\/** For static file, try to detect through file extension **\\/\\r\\n            if (!$mimeType && $modx->controller->chunk->isStatic()) {\\r\\n                $extension = pathinfo($modx->controller->chunk->getSourceFile(), PATHINFO_EXTENSION);\\r\\n                $mimeType = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/* Default to HTML *\\/\\r\\n        if (!$mimeType) {\\r\\n            $mimeType = \'text\\/html\';\\r\\n        }\\r\\n        \\r\\n        break;\\r\\n    case \'OnPluginFormPrerender\':\\r\\n        \\/\\/ Plugins are PHP\\r\\n        $field = \'modx-plugin-plugincode\';\\r\\n        $mimeType = \'application\\/x-php\';\\r\\n        $mixedMode = false;\\r\\n        break;\\r\\n    case \'OnFileCreateFormPrerender\':\\r\\n        \\/\\/ On file creation, use plain text\\r\\n        $field = \'modx-file-content\';\\r\\n        $mimeType = \'text\\/plain\';\\r\\n        $mixedMode = true;\\r\\n        break;\\r\\n    case \'OnFileEditFormPrerender\':\\r\\n        \\/\\/ For file editing, we look at the file extension\\r\\n        $field = \'modx-file-content\';\\r\\n        \\/\\/ Identify mime type according to extension\\r\\n        $extension = pathinfo($scriptProperties[\'file\'], PATHINFO_EXTENSION);\\r\\n        $mimeType = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\r\\n        $mixedMode = true;\\r\\n        break;\\r\\n    case \'OnDocFormPrerender\':\\r\\n        \\/\\/ For document, we look at the content type\\r\\n        \\/\\/ But we wont show anything if another RTE is set (e.g. CKEditor or TinyMCE)\\r\\n        if (!$modx->controller->resourceArray) {\\r\\n            return;\\r\\n        }\\r\\n        if ($modx->getOption(\'use_editor\')) {\\r\\n            $richText = $modx->controller->resourceArray[\'richtext\'];\\r\\n            $classKey = $modx->controller->resourceArray[\'class_key\'];\\r\\n            if ($richText || in_array($classKey, array(\'modStaticResource\',\'modSymLink\',\'modWebLink\',\'modXMLRPCResource\'))) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $field = \'ta\';\\r\\n        $mimeType = $modx->getObject(\'modContentType\', $modx->controller->resourceArray[\'content_type\'])->get(\'mime_type\');\\r\\n        $mixedMode = true;\\r\\n        break;\\r\\n    default:\\r\\n        return;\\r\\n}\\r\\n\\r\\n\\/** If field found, include the javascript code to load Ace **\\/\\r\\nif ($field) {\\r\\n    \\/\\/ Get corresponding Ace mode according to mime type\\r\\n    $mode = isset($mimeTypeToMode[$mimeType]) ? $mimeTypeToMode[$mimeType] : \'text\';\\r\\n    \\r\\n    \\/\\/ Handle mixed mode\\r\\n    if ($mixedMode == true) {\\r\\n        \\/\\/ Mixed mode, set needed files and functions \\r\\n        \\r\\n        array_push($scriptPaths, \\"$AceAssetsUrl\\/modx_highlight_rules.js\\");\\r\\n        \\r\\n        $setModeScript = <<<JSSCRIPT\\r\\n            \\/** \\r\\n             * Function to create a mixed mode with MODX tags\\r\\n             * Based on the work of danyaPostfactum, see link below\\r\\n             * https:\\/\\/github.com\\/danyaPostfactum\\/modx-ace\\/blob\\/master\\/assets\\/components\\/ace\\/modx.texteditor.js\\r\\n             *\\/\\r\\n            var createModxMixedMode = function(Mode) {\\r\\n                var oop = ace.require(\\"ace\\/lib\\/oop\\");\\r\\n                \\r\\n                \\/* Create the new mixed mode *\\/\\r\\n                var ModxMixedMode = function() {\\r\\n                    Mode.call(this);\\r\\n                    \\r\\n                    \\/\\/ Save the parent rules to be able to call them later\\r\\n                    var parentHighlightRules = this.HighlightRules;\\r\\n                    \\r\\n                    \\/* Create the new mixed rules *\\/\\r\\n                    var mixedHighlightRules = function() {\\r\\n                        \\/\\/ Set parent rules\\r\\n                        parentHighlightRules.call(this);\\r\\n                        \\r\\n                        \\/\\/ Set modx rules (function available in file modx_highlight_rules.js already loaded)\\r\\n                        modxCustomHighlightRules.call(this);\\r\\n                        \\r\\n                        \\/\\/ Normalized!\\r\\n                        this.normalizeRules();\\r\\n                    }\\r\\n                    \\r\\n                    \\/\\/ Inherit prototype from parent rules\\r\\n                    oop.inherits(mixedHighlightRules, parentHighlightRules);\\r\\n                    \\r\\n                    \\/\\/ Set mixed highlight rules\\r\\n                    this.HighlightRules = mixedHighlightRules;\\r\\n                }\\r\\n                \\r\\n                \\/\\/ Inherit prototype from parent Mode\\r\\n                oop.inherits(ModxMixedMode, Mode);\\r\\n                \\r\\n                \\/\\/ Handle the case were a worker is defined in parent mode\\r\\n                if (Mode.prototype.createWorker) {\\r\\n                    ModxMixedMode.prototype.createWorker = function(session) {\\r\\n                        \\/\\/ Call parent without \'this\'\\r\\n                        var worker = Mode.prototype.createWorker(session);\\r\\n                        if (worker) {\\r\\n                            \\/\\/ Replace onError function to handle modx tag\\r\\n                            worker.on(\\"error\\", function(e) {\\r\\n                                var annotations = [];\\r\\n                                var idx_max = e.data.length;\\r\\n                                \\/\\/ Loop through errors, and silence errors when a modx tag [[ exists\\r\\n                                for(var i = 0 ; i < idx_max ; i++) {\\r\\n                                    \\/\\/ Get line\\r\\n                                    var line = session.getLine(e.data[i].row);\\r\\n                                    if (line.indexOf(\'[[\') === -1) {\\r\\n                                        \\/\\/ No modx tag, add to annotations\\r\\n                                        annotations.push(e.data[i]);\\r\\n                                    }\\r\\n                                }\\r\\n                                session.setAnnotations(annotations);\\r\\n                            });\\r\\n                        }\\r\\n                        return worker;\\r\\n                    };\\r\\n                }\\r\\n                \\r\\n                \\/\\/ We\'re done. Return the new mixed mode\\r\\n                return new ModxMixedMode();\\r\\n            };\\r\\n            \\r\\n            \\/** \\r\\n             * Function to set a mixed mode\\r\\n             *\\/\\r\\n            var setMixedMode = function(editor, mode) {\\r\\n                var config = ace.require(\'ace\\/config\');\\r\\n                config.loadModule([\\"mode\\", \'ace\\/mode\\/\' + mode], function(module) {\\r\\n                    var mode = createModxMixedMode(module.Mode);\\r\\n                    editor.session.setMode(mode);\\r\\n                }.bind(this));\\r\\n            }\\r\\n                \\r\\n            setMixedMode(editor, \\"{$mode}\\");\\r\\nJSSCRIPT;\\r\\n\\r\\n    } else {\\r\\n        \\/\\/ No mixed mode, simply set mode\\r\\n        $setModeScript = \\"editor.session.setMode(\'ace\\/mode\\/{$mode}\');\\";\\r\\n    }\\r\\n    \\r\\n    \\/\\/ Convert options to JSON object\\r\\n    $editorOptions = json_encode($editorOptions, JSON_FORCE_OBJECT);\\r\\n    $rendererOptions = json_encode($rendererOptions, JSON_FORCE_OBJECT);\\r\\n    \\r\\n    \\/\\/ Generate cache busting query string\\r\\n    \\/\\/ Based on current plugin version + hash of all properties\\r\\n    $propertiesHash = md5(\\"$AcePath $EmmetPath $AceTheme $AceReplaceCTRLDKbdShortcut $AceAutocompletion $AceSettingsMenu $AceSpellcheck $AceEmmet $AceChunkDetectMIMEShebang\\");\\r\\n    $CacheBustingQSValue = \\"?v=$pluginVersion-$propertiesHash\\";\\r\\n\\r\\n    \\/\\/ Generate final script!\\r\\n    $script = \\"\\";\\r\\n    foreach($scriptPaths as $scriptPath) {\\r\\n        \\/\\/ Include file\\r\\n        $script .= \\"<script src=\'$scriptPath$CacheBustingQSValue\' type=\'text\\/javascript\' charset=\'utf-8\'><\\/script>\\\\n\\";\\r\\n    }\\r\\n    \\r\\n    \\/\\/ The script...\\r\\n    $script .= <<<JSSCRIPT\\r\\n<script type=\\"text\\/javascript\\">\\r\\n    (function() {\\r\\n        \\"use strict\\";\\r\\n    \\r\\n        \\/\\/ Max number of tries\\r\\n        var MAX_TRIES = 10;\\r\\n        \\r\\n        \\/\\/ Time in ms to wait between each tries\\r\\n        var WAIT_BETWEEN_TRIES_MS = 100;\\r\\n        \\r\\n        \\/\\/ Hold the current try number\\r\\n        var currentTry = 0;\\r\\n        \\r\\n        \\/\\/ Will hold the textarea DOM element\\r\\n        var textarea;\\r\\n        \\r\\n        \\/\\/ Useful dom lib\\r\\n        var dom = ace.require(\\"ace\\/lib\\/dom\\");\\r\\n        \\r\\n        \\/** \\r\\n         * Function Init ACE editor\\r\\n         * Uses textarea variable\\r\\n         *\\/\\r\\n        var initAceCodeEditor = function() {\\r\\n            \\/\\/ Set parent element to relative position\\r\\n            \\/\\/ Hence the Ace Editor div absolute positionning will be relative to it\\r\\n            textarea.parentNode.style.position = \'relative\';\\r\\n            \\r\\n            \\/\\/ Create div element for Ace\\r\\n            var aceEditorDiv = document.createElement(\\"div\\");\\r\\n            setEditorSize(aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Append to DOM before the textarea\\r\\n            textarea.parentNode.insertBefore(aceEditorDiv, textarea);\\r\\n            \\r\\n            \\/\\/ Hide textarea\\r\\n            textarea.style.visibility = \'hidden\';\\r\\n            \\r\\n            \\/\\/ Create Ace editor !\\r\\n            var editor = ace.edit(aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Additional scripts\\r\\n            {$editorAdditionalScript}\\r\\n            \\r\\n            \\/\\/ Fullscreen toggle support\\r\\n            editor.commands.addCommand({\\r\\n                name: \\"Toggle Fullscreen\\",\\r\\n                bindKey: \\"F11\\",\\r\\n                exec: function(editor) {\\r\\n                    \\/\\/ Toggle class\\r\\n                    dom.toggleCssClass(editor.container, \\"fullScreen\\");\\r\\n                    \\/\\/ Get current situation\\r\\n                    var isFullScreen = dom.hasCssClass(editor.container, \\"fullScreen\\");\\r\\n                    \\/\\/ Set size and resize as needed\\r\\n                    setEditorSize(editor.container, isFullScreen);\\r\\n                    editor.resize();\\r\\n                    \\/\\/ Handle searchbox position as needed\\r\\n                    handleSearchBoxPosition(editor, isFullScreen);\\r\\n                }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Search while fullscreen support\\r\\n            editor.commands.addCommand({\\r\\n                name: \'CustomFind\',\\r\\n                bindKey: {win: \'Ctrl-F\', mac: \'Command-F\'},\\r\\n                exec: function(editor) { handleSearchBox(editor); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Replace while fullscreen support\\r\\n            editor.commands.addCommand({\\r\\n                name: \'CustomReplace\',\\r\\n                bindKey: {win: \'Ctrl-H\', mac: \'Command-Option-F\'},\\r\\n                exec: function(editor) { handleSearchBox(editor, true); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Additionnal Replace command\\r\\n            editor.commands.addCommand({\\r\\n                name: \'additionnalReplace\',\\r\\n                bindKey: {win: \'Ctrl-R\', mac: \'Command-R\'},\\r\\n                exec: function(editor) { handleSearchBox(editor, true); }\\r\\n            });\\r\\n        \\r\\n            \\/\\/ Ace Editor settings\\r\\n            editor.setOptions({$editorOptions});\\r\\n            editor.renderer.setOptions({$rendererOptions});\\r\\n            \\r\\n            {$setModeScript}\\r\\n            \\r\\n            editor.getSession().setValue(textarea.value);\\r\\n            \\r\\n            \\/\\/ Keep Ace and textarea synchronized\\r\\n            editor.on(\\"change\\", function() {\\r\\n                textarea.value = editor.getSession().getValue();\\r\\n            });\\r\\n            \\r\\n        }\\r\\n        \\r\\n        \\/** \\r\\n         * Function search for the textarea\\r\\n         * Recursive function\\r\\n         * If textarea is not found, wait a bit and search again\\r\\n         *\\/\\r\\n        var tryToGetTextArea = function() {\\r\\n            \\/\\/ Try to find the textarea\\r\\n            textarea = document.getElementById(\\"{$field}\\");\\r\\n            \\r\\n            if (textarea) {\\r\\n                \\/\\/ Element found, init!\\r\\n                initAceCodeEditor(textarea);\\r\\n            } else {\\r\\n                \\/\\/ Damn, not found. Wait a bit and try again\\r\\n                setTimeout(function() {\\r\\n                    currentTry++;\\r\\n                    if (currentTry <= MAX_TRIES) {\\r\\n                        tryToGetTextArea();\\r\\n                    }\\r\\n                }, WAIT_BETWEEN_TRIES_MS);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/** \\r\\n         * Function to set editor size between fullscreen or not\\r\\n         *\\/\\r\\n        var setEditorSize = function(editorContainer, isFullScreen) {\\r\\n            if (isFullScreen) {\\r\\n                editorContainer.style.position = \'fixed\';\\r\\n                editorContainer.style.top = \'55px\';\\r\\n                editorContainer.style.bottom = \'0\';\\r\\n                editorContainer.style.left = \'0\';\\r\\n                editorContainer.style.right = \'0\';\\r\\n                editorContainer.style[\'z-index\'] = \'10\'; \\/\\/ Top right menu has z-index of 11\\r\\n                \\r\\n                editorContainer.style.width = null;\\r\\n                editorContainer.style.height = null;\\r\\n            } else {\\r\\n                editorContainer.style.position = \'absolute\';\\r\\n                editorContainer.style.width = \'100%\';\\r\\n                editorContainer.style.height = \'100%\';\\r\\n                \\r\\n                editorContainer.style.top = null;\\r\\n                editorContainer.style.bottom = null;\\r\\n                editorContainer.style.left = null;\\r\\n                editorContainer.style.right = null;\\r\\n                editorContainer.style[\'z-index\'] = null;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle searchbox (show\\/hide)\\r\\n         *\\/\\r\\n        var handleSearchBox = function(editor, isReplace) {\\r\\n            \\/\\/ Load extension\\r\\n            ace.config.loadModule(\\"ace\\/ext\\/searchbox\\", function(e) {\\r\\n                \\/\\/ Launch searchbox\\r\\n                e.Search(editor, isReplace);\\r\\n                \\/\\/ Handle searchbox position\\r\\n                handleSearchBoxPosition(editor, dom.hasCssClass(editor.container, \\"fullScreen\\"));\\r\\n            });\\r\\n        }\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle searchbox position depending on fullscreen or not\\r\\n         *\\/\\r\\n        var handleSearchBoxPosition = function(editor, isFullScreen) {\\r\\n            if (!editor.searchBox) return;\\r\\n            \\r\\n            if (isFullScreen) {\\r\\n                \\/\\/ If fullscreen, put searchbox on bottom\\r\\n                editor.searchBox.element.style.top = \'auto\';\\r\\n                editor.searchBox.element.style.bottom = \'0\';\\r\\n            } else {\\r\\n                \\/\\/ If not, unset any specific style value previously set\\r\\n                editor.searchBox.element.style.top = null;\\r\\n                editor.searchBox.element.style.bottom = null;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/\\/ Start searching!\\r\\n        tryToGetTextArea();\\r\\n    })();\\r\\n<\\/script>\\r\\nJSSCRIPT;\\r\\n\\r\\n    $modx->controller->addHtml($script);\\r\\n}","locked":0,"properties":"a:10:{s:7:\\"AcePath\\";a:7:{s:4:\\"name\\";s:7:\\"AcePath\\";s:4:\\"desc\\";s:51:\\"URL or path to ACE javascript file (and extensions)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:55:\\"https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.3.3\\/ace.js\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:5:\\"Theme\\";a:7:{s:4:\\"name\\";s:5:\\"Theme\\";s:4:\\"desc\\";s:89:\\"editor theme name (you can test them all here: https:\\/\\/ace.c9.io\\/build\\/kitchen-sink.html)\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:37:{i:0;a:2:{s:4:\\"text\\";s:21:\\"Chrome (bright theme)\\";s:5:\\"value\\";s:6:\\"chrome\\";}i:1;a:2:{s:4:\\"text\\";s:21:\\"Clouds (bright theme)\\";s:5:\\"value\\";s:6:\\"clouds\\";}i:2;a:2:{s:4:\\"text\\";s:29:\\"Crimson Editor (bright theme)\\";s:5:\\"value\\";s:14:\\"crimson_editor\\";}i:3;a:2:{s:4:\\"text\\";s:19:\\"Dawn (bright theme)\\";s:5:\\"value\\";s:4:\\"dawn\\";}i:4;a:2:{s:4:\\"text\\";s:26:\\"Dreamweaver (bright theme)\\";s:5:\\"value\\";s:11:\\"dreamweaver\\";}i:5;a:2:{s:4:\\"text\\";s:22:\\"Eclipse (bright theme)\\";s:5:\\"value\\";s:7:\\"eclipse\\";}i:6;a:2:{s:4:\\"text\\";s:21:\\"GitHub (bright theme)\\";s:5:\\"value\\";s:6:\\"github\\";}i:7;a:2:{s:4:\\"text\\";s:23:\\"IPlastic (bright theme)\\";s:5:\\"value\\";s:8:\\"iplastic\\";}i:8;a:2:{s:4:\\"text\\";s:30:\\"Solarized Light (bright theme)\\";s:5:\\"value\\";s:15:\\"solarized_light\\";}i:9;a:2:{s:4:\\"text\\";s:23:\\"TextMate (bright theme)\\";s:5:\\"value\\";s:8:\\"textmate\\";}i:10;a:2:{s:4:\\"text\\";s:23:\\"Tomorrow (bright theme)\\";s:5:\\"value\\";s:8:\\"tomorrow\\";}i:11;a:2:{s:4:\\"text\\";s:20:\\"XCode (bright theme)\\";s:5:\\"value\\";s:5:\\"xcode\\";}i:12;a:2:{s:4:\\"text\\";s:21:\\"Kuroir (bright theme)\\";s:5:\\"value\\";s:6:\\"kuroir\\";}i:13;a:2:{s:4:\\"text\\";s:26:\\"KatzenMilch (bright theme)\\";s:5:\\"value\\";s:11:\\"katzenmilch\\";}i:14;a:2:{s:4:\\"text\\";s:25:\\"SQL Server (bright theme)\\";s:5:\\"value\\";s:9:\\"sqlserver\\";}i:15;a:2:{s:4:\\"text\\";s:21:\\"Ambiance (dark theme)\\";s:5:\\"value\\";s:8:\\"ambiance\\";}i:16;a:2:{s:4:\\"text\\";s:18:\\"Chaos (dark theme)\\";s:5:\\"value\\";s:5:\\"chaos\\";}i:17;a:2:{s:4:\\"text\\";s:28:\\"Clouds Midnight (dark theme)\\";s:5:\\"value\\";s:15:\\"clouds_midnight\\";}i:18;a:2:{s:4:\\"text\\";s:20:\\"Dracula (dark theme)\\";s:5:\\"value\\";s:7:\\"dracula\\";}i:19;a:2:{s:4:\\"text\\";s:19:\\"Cobalt (dark theme)\\";s:5:\\"value\\";s:6:\\"cobalt\\";}i:20;a:2:{s:4:\\"text\\";s:20:\\"Gruvbox (dark theme)\\";s:5:\\"value\\";s:7:\\"gruvbox\\";}i:21;a:2:{s:4:\\"text\\";s:27:\\"Green on Black (dark theme)\\";s:5:\\"value\\";s:3:\\"gob\\";}i:22;a:2:{s:4:\\"text\\";s:25:\\"idle Fingers (dark theme)\\";s:5:\\"value\\";s:12:\\"idle_fingers\\";}i:23;a:2:{s:4:\\"text\\";s:20:\\"krTheme (dark theme)\\";s:5:\\"value\\";s:8:\\"kr_theme\\";}i:24;a:2:{s:4:\\"text\\";s:22:\\"Merbivore (dark theme)\\";s:5:\\"value\\";s:9:\\"merbivore\\";}i:25;a:2:{s:4:\\"text\\";s:27:\\"Merbivore Soft (dark theme)\\";s:5:\\"value\\";s:14:\\"merbivore_soft\\";}i:26;a:2:{s:4:\\"text\\";s:28:\\"Mono Industrial (dark theme)\\";s:5:\\"value\\";s:15:\\"mono_industrial\\";}i:27;a:2:{s:4:\\"text\\";s:20:\\"Monokai (dark theme)\\";s:5:\\"value\\";s:7:\\"monokai\\";}i:28;a:2:{s:4:\\"text\\";s:27:\\"Pastel on dark (dark theme)\\";s:5:\\"value\\";s:14:\\"pastel_on_dark\\";}i:29;a:2:{s:4:\\"text\\";s:27:\\"Solarized Dark (dark theme)\\";s:5:\\"value\\";s:14:\\"solarized_dark\\";}i:30;a:2:{s:4:\\"text\\";s:21:\\"Terminal (dark theme)\\";s:5:\\"value\\";s:8:\\"terminal\\";}i:31;a:2:{s:4:\\"text\\";s:27:\\"Tomorrow Night (dark theme)\\";s:5:\\"value\\";s:14:\\"tomorrow_night\\";}i:32;a:2:{s:4:\\"text\\";s:32:\\"Tomorrow Night Blue (dark theme)\\";s:5:\\"value\\";s:19:\\"tomorrow_night_blue\\";}i:33;a:2:{s:4:\\"text\\";s:34:\\"Tomorrow Night Bright (dark theme)\\";s:5:\\"value\\";s:21:\\"tomorrow_night_bright\\";}i:34;a:2:{s:4:\\"text\\";s:31:\\"Tomorrow Night 80s (dark theme)\\";s:5:\\"value\\";s:23:\\"tomorrow_night_eighties\\";}i:35;a:2:{s:4:\\"text\\";s:21:\\"Twilight (dark theme)\\";s:5:\\"value\\";s:8:\\"twilight\\";}i:36;a:2:{s:4:\\"text\\";s:24:\\"Vibrant Ink (dark theme)\\";s:5:\\"value\\";s:11:\\"vibrant_ink\\";}}s:5:\\"value\\";s:7:\\"monokai\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:23:\\"ReplaceCTRLDKbdShortcut\\";a:7:{s:4:\\"name\\";s:23:\\"ReplaceCTRLDKbdShortcut\\";s:4:\\"desc\\";s:175:\\"Replace the CTRL-D (or CMD-D) keyboard shortcut to perform a more sensible action: duplicate the current line or selection (instead of deleting, which is the default behavior)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:14:\\"Autocompletion\\";a:7:{s:4:\\"name\\";s:14:\\"Autocompletion\\";s:4:\\"desc\\";s:207:\\"Enable Autocompletion: none, basic (show on CTRL-Space) or live (show on typing) - Note that \\"ext-language_tools.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-language_tools.js)\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:3:{i:0;a:2:{s:4:\\"text\\";s:4:\\"None\\";s:5:\\"value\\";s:4:\\"none\\";}i:1;a:2:{s:4:\\"text\\";s:26:\\"Basic (show on CTRL-SPACE)\\";s:5:\\"value\\";s:5:\\"basic\\";}i:2;a:2:{s:4:\\"text\\";s:21:\\"Live (show on typing)\\";s:5:\\"value\\";s:4:\\"live\\";}}s:5:\\"value\\";s:5:\\"basic\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:12:\\"SettingsMenu\\";a:7:{s:4:\\"name\\";s:12:\\"SettingsMenu\\";s:4:\\"desc\\";s:177:\\"Add a settings menu accessible with CTR-Q (or CMD-Q) - Note that \\"ext-settings_menu.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-settings_menu.js)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:10:\\"Spellcheck\\";a:7:{s:4:\\"name\\";s:10:\\"Spellcheck\\";s:4:\\"desc\\";s:136:\\"Enable spellcheck - Note that \\"ext-spellcheck.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-spellcheck.js)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:9:\\"EmmetPath\\";a:7:{s:4:\\"name\\";s:9:\\"EmmetPath\\";s:4:\\"desc\\";s:82:\\"URL or path to Emmet javascript file (see https:\\/\\/github.com\\/cloud9ide\\/emmet-core)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:47:\\"https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:5:\\"Emmet\\";a:7:{s:4:\\"name\\";s:5:\\"Emmet\\";s:4:\\"desc\\";s:121:\\"Enable emmet - Note that \\"ext-emmet.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-emmet.js)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:20:\\"AcePrintMarginColumn\\";a:7:{s:4:\\"name\\";s:20:\\"AcePrintMarginColumn\\";s:4:\\"desc\\";s:164:\\"Print margin column position - Set the character position of the print margin (for instance useful if you like to code with 80 chars wide max) - Set to 0 to disable\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:22:\\"ChunkDetectMIMEShebang\\";a:7:{s:4:\\"name\\";s:22:\\"ChunkDetectMIMEShebang\\";s:4:\\"desc\\";s:142:\\"Enable \'shebang-style\' MIME detection for chunks (in description or in the first line of chunk content) - See README for supported MIME values\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * Simple Ace Source Editor Plugin\\r\\n * https:\\/\\/github.com\\/Indigo744\\/Modx-Revo-Simple-Ace-Code-Editor\\r\\n *\\r\\n * Create plugin and paste this code or install it from Package Manager\\r\\n * Set which_element_editor system option to SimpleAceCodeEditor\\r\\n *\\r\\n * Events: OnManagerPageBeforeRender, OnRichTextEditorRegister, OnSnipFormPrerender,\\r\\n * OnTempFormPrerender, OnChunkFormPrerender, OnPluginFormPrerender,\\r\\n * OnFileCreateFormPrerender, OnFileEditFormPrerender, OnDocFormPrerender\\r\\n * and OnPluginSave to force cache refresh\\r\\n * \\r\\n * Properties:\\r\\n *\\r\\n *     AcePath: URL or path to ACE javascript file\\r\\n *              default: https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.3.3\\/ace.js\\r\\n *\\r\\n *     Theme: editor theme name (you can test them all here: https:\\/\\/ace.c9.io\\/build\\/kitchen-sink.html)\\r\\n *            default: monokai\\r\\n *\\r\\n *     ReplaceCTRLDKbdShortcut: Replace the CTRL-D (or CMD-D) keyboard shortcut to perform a more sensible action\\r\\n *                              duplicate the current line or selection (instead of deleting, which is the default behavior)\\r\\n *                              default: true\\r\\n *\\r\\n *     Autocompletion: Enable Auto-completion: none, basic (show on CTRL-Space) or live (show on typing)\\r\\n *                     Note that \\"ext-language_tools.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-language_tools.js)\\r\\n *                     default: basic\\r\\n *\\r\\n *     SettingsMenu: Add a settings menu accessible with CTR-Q (or CMD-Q)\\r\\n *                   Note that \\"ext-settings_menu.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-settings_menu.js)\\r\\n *                   default: false\\r\\n *\\r\\n *     Spellcheck: Enable spell-check\\r\\n *                 Note that \\"ext-spellcheck.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-spellcheck.js)\\r\\n *                 default: false\\r\\n *\\r\\n *     EmmetPath: URL or path to Emmet js file\\r\\n *                For more information, see https:\\/\\/github.com\\/cloud9ide\\/emmet-core\\r\\n *                default: https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\r\\n *\\r\\n *     Emmet: Enable Emmet\\r\\n *            Note that Emmet JS file must be loaded first (see EmmetPath, it must be correctly set)\\r\\n *            Note that \\"ext-emmet.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-emmet.js)\\r\\n *            It is recommended to disable ReplaceCTRLDKbdShortcut property when using Emmet (as it replace an Emmet shortcut CTRL-D)\\r\\n *            default: false\\r\\n *\\r\\n *     AcePrintMarginColumn: Print margin column position\\r\\n *                           Set the character position of the print margin (for instance useful if you like to code with 80 chars wide max)\\r\\n *                           Set to 0 to disable it completely\\r\\n *                           default: 0 (disabled)\\r\\n *\\r\\n *     ChunkDetectMIMEShebang: Enable \'shebang-style\' MIME detection for chunks (in description or in the first line of chunk content)\\r\\n *                             This is particularly useful if your chunk contains directly JS, or SASS, or anything different than HTML...\\r\\n *                             Supported MIME values are text\\/x-smarty, text\\/html, application\\/xhtml+xml, text\\/css, text\\/x-scss, \\r\\n *                                                       text\\/x-sass, text\\/x-less, image\\/svg+xml, application\\/xml, text\\/xml, text\\/javascript, \\r\\n *                                                       application\\/javascript, application\\/json, text\\/x-php, application\\/x-php, text\\/x-sql, \\r\\n *                                                       text\\/x-markdown, text\\/plain, text\\/x-twig\\r\\n *                             default: true\\r\\n * \\r\\n *\\r\\n * If you want to edit a property, create your own property set first.\\r\\n *\\r\\n *\\r\\n * Based on Ace Source Editor Plugin by Danil Kostin\\r\\n *\\r\\n * @package SimpleAceCodeEditor\\r\\n *\\r\\n * @var array $scriptProperties\\r\\n * @var Ace $ace\\r\\n *\\/\\r\\n\\r\\n\\/** Package information (set at build) **\\/\\r\\n$pluginName = \'SimpleAceCodeEditor\';\\r\\n$pluginVersion = \'1.4.4-pl\';\\r\\n\\r\\n\\/** Force mgr refresh on plugin save **\\/\\r\\nif ($modx->event->name == \'OnPluginSave\') {\\r\\n    if ($plugin->get(\'name\') === $pluginName) {\\r\\n        $modx->cacheManager->refresh(array(\\r\\n            \'context_settings\' => array(\'contexts\' => array(\'mgr\'))\\r\\n        ));\\r\\n    }\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Register RTE **\\/\\r\\nif ($modx->event->name == \'OnRichTextEditorRegister\') {\\r\\n    $modx->event->output($pluginName);\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Check if RTE (element) setting is set to this **\\/\\r\\nif ($modx->getOption(\'which_element_editor\', null) !== $pluginName) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Get properties **\\/\\r\\n$AcePath = $modx->getoption(\'AcePath\', $scriptProperties, $modx->getOption($pluginName . \'.AcePath\', null, \\"https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.3.3\\/ace.js\\"));\\r\\n$EmmetPath = $modx->getoption(\'EmmetPath\', $scriptProperties, $modx->getOption($pluginName . \'.EmmetPath\', null, \\"https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\"));\\r\\n$AceTheme = $modx->getoption(\'Theme\', $scriptProperties, $modx->getOption($pluginName . \'.Theme\', null, \'monokai\'));\\r\\n$AceReplaceCTRLDKbdShortcut = $modx->getoption(\'ReplaceCTRLDKbdShortcut\', $scriptProperties, $modx->getOption($pluginName . \'.ReplaceCTRDKbdShortcut\', null, true));\\r\\n$AceAutocompletion = $modx->getoption(\'Autocompletion\', $scriptProperties, $modx->getOption($pluginName . \'.Autocompletion\', null, \'basic\'));\\r\\n$AceSettingsMenu = $modx->getoption(\'SettingsMenu\', $scriptProperties, $modx->getOption($pluginName . \'.SettingsMenu\', null, false));\\r\\n$AceSpellcheck = $modx->getoption(\'Spellcheck\', $scriptProperties, $modx->getOption($pluginName . \'.Spellcheck\', null, false));\\r\\n$AceEmmet = $modx->getoption(\'Emmet\', $scriptProperties, $modx->getOption($pluginName . \'.Emmet\', null, false));\\r\\n$AcePrintMarginColumn = $modx->getoption(\'AcePrintMarginColumn\', $scriptProperties, $modx->getOption($pluginName . \'.AcePrintMarginColumn\', null, 0));\\r\\n$AceChunkDetectMIMEShebang = $modx->getoption(\'ChunkDetectMIMEShebang\', $scriptProperties, $modx->getOption($pluginName . \'.ChunkDetectMIMEShebang\', null, true));\\r\\n\\r\\n\\/** Inits script options **\\/\\r\\n$AceAssetsUrl = $modx->getOption(\'assets_url\') . \'components\\/\' . strtolower($pluginName);\\r\\n$AceBasePath = dirname($AcePath);\\r\\n$scriptPaths = array($AcePath);\\r\\n$editorOptions = array();\\r\\n$rendererOptions = array(\\r\\n    \'theme\' => \\"ace\\/theme\\/$AceTheme\\",\\r\\n    \'showPrintMargin\' => $AcePrintMarginColumn > 0 ? true : false,\\r\\n    \'printMarginColumn\' => $AcePrintMarginColumn > 0 ? $AcePrintMarginColumn : 80,\\r\\n);\\r\\n$editorAdditionalScript = \\"\\\\n\\";\\r\\n\\r\\n\\/** Handle proper CTRL-D **\\/\\r\\nif ($AceReplaceCTRLDKbdShortcut == true) {\\r\\n    $editorAdditionalScript .= <<<JSSCRIPT\\r\\n        editor.commands.removeCommand(\'del\');\\r\\n        editor.commands.addCommand({\\r\\n            name: \\"del\\",\\r\\n            bindKey: {win: \\"Delete\\",  mac: \\"Delete|Shift-Delete\\"},\\r\\n            exec: function(editor) { editor.remove(\\"right\\"); },\\r\\n            multiSelectAction: \\"forEach\\",\\r\\n            scrollIntoView: \\"cursor\\"\\r\\n        });\\r\\n        editor.commands.addCommand({\\r\\n            name: \\"Duplicate Selection\\",\\r\\n            bindKey: {win: \\"Ctrl-D\\", mac: \\"Command-D\\"},\\r\\n            exec: function(editor) { editor.duplicateSelection(); },\\r\\n            scrollIntoView: \\"cursor\\",\\r\\n            multiSelectAction: \\"forEach\\"\\r\\n        });\\r\\nJSSCRIPT;\\r\\n}\\r\\n\\r\\n\\/** Handle autocompletion extension **\\/\\r\\nif ($AceAutocompletion === \'live\' || $AceAutocompletion === \'basic\') {\\r\\n    $editorOptions[\'enableBasicAutocompletion\'] = true;\\r\\n    $editorOptions[\'enableLiveAutocompletion\'] = $AceAutocompletion === \'live\';\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-language_tools.js\\");\\r\\n}\\r\\n\\r\\n\\/** Handle settings_menu extension **\\/\\r\\nif ($AceSettingsMenu == true) {\\r\\n    $editorAdditionalScript .= <<<JSSCRIPT\\r\\n        var RequiresettingsMenu = ace.require(\'ace\\/ext\\/settings_menu\');\\r\\n        if (RequiresettingsMenu) {\\r\\n            \\/\\/ Init with current editor\\r\\n            RequiresettingsMenu.init(editor);\\r\\n            \\/\\/ Set CTRL-Q shortcut\\r\\n        \\teditor.commands.addCommands([{\\r\\n        \\t\\tname: \\"showSettingsMenu\\",\\r\\n        \\t\\tbindKey: {win: \\"Ctrl-q\\", mac: \\"Ctrl-q\\"},\\r\\n        \\t\\texec: function(editor) {\\r\\n        \\t\\t\\teditor.showSettingsMenu();\\r\\n        \\t\\t},\\r\\n        \\t\\treadOnly: true\\r\\n        \\t}]);\\r\\n        }\\r\\nJSSCRIPT;\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-settings_menu.js\\");\\r\\n} \\r\\n\\r\\n\\/** Handle Spellcheck extension **\\/\\r\\nif ($AceSpellcheck == true) {\\r\\n    $editorOptions[\'spellcheck\'] = true;\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-spellcheck.js\\");\\r\\n} \\r\\n\\r\\n\\/** Handle Emmet extension **\\/\\r\\nif ($AceEmmet == true) {\\r\\n    $editorOptions[\'enableEmmet\'] = true;\\r\\n    array_push($scriptPaths, $EmmetPath);\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-emmet.js\\");\\r\\n}\\r\\n\\r\\n\\/** Corresponding arrays **\\/\\r\\n$mimeTypeToMode = array(\\r\\n    \'text\\/x-smarty\'                     => \'smarty\',\\r\\n    \'text\\/html\'                         => \'html\',\\r\\n    \'application\\/xhtml+xml\'             => \'html\',\\r\\n    \'text\\/css\'                          => \'css\',\\r\\n    \'text\\/x-scss\'                       => \'scss\',\\r\\n    \'text\\/x-sass\'                       => \'scss\',\\r\\n    \'text\\/x-less\'                       => \'less\',\\r\\n    \'image\\/svg+xml\'                     => \'svg\',\\r\\n    \'application\\/xml\'                   => \'xml\',\\r\\n    \'text\\/xml\'                          => \'xml\',\\r\\n    \'text\\/javascript\'                   => \'javascript\',\\r\\n    \'application\\/javascript\'            => \'javascript\',\\r\\n    \'application\\/json\'                  => \'json\',\\r\\n    \'text\\/x-php\'                        => \'php\',\\r\\n    \'application\\/x-php\'                 => \'php\',\\r\\n    \'text\\/x-sql\'                        => \'sql\',\\r\\n    \'application\\/sql\'                   => \'sql\',\\r\\n    \'text\\/x-markdown\'                   => \'markdown\',\\r\\n    \'text\\/markdown\'                     => \'markdown\',\\r\\n    \'text\\/plain\'                        => \'text\',\\r\\n    \'text\\/x-twig\'                       => \'twig\',\\r\\n    \'application\\/x-extension-htaccess\'  => \'apache_conf\',\\r\\n    \'application\\/vnd.coffeescript\'      => \'coffee\',\\r\\n    \'application\\/x-typescript\'          => \'typescript\',\\r\\n    \'text\\/x-ini\'                        => \'ini\',\\r\\n    \'text\\/x-ejs\'                        => \'ejs\',\\r\\n    \'application\\/x-perl\'                => \'perl\',\\r\\n);\\r\\n\\r\\n$extensionMap = array(\\r\\n    \'tpl\'       => \'text\\/html\',\\r\\n    \'htm\'       => \'text\\/html\',\\r\\n    \'html\'      => \'text\\/html\',\\r\\n    \'css\'       => \'text\\/css\',\\r\\n    \'scss\'      => \'text\\/x-scss\',\\r\\n    \'sass\'      => \'text\\/x-sass\',\\r\\n    \'less\'      => \'text\\/x-less\',\\r\\n    \'svg\'       => \'image\\/svg+xml\',\\r\\n    \'xml\'       => \'application\\/xml\',\\r\\n    \'xsl\'       => \'application\\/xml\',\\r\\n    \'js\'        => \'application\\/javascript\',\\r\\n    \'json\'      => \'application\\/json\',\\r\\n    \'php\'       => \'application\\/x-php\',\\r\\n    \'sql\'       => \'text\\/x-sql\',\\r\\n    \'txt\'       => \'text\\/plain\',\\r\\n    \'htaccess\'  => \'application\\/x-extension-htaccess\',\\r\\n    \'coffee\'    => \'application\\/vnd.coffeescript\',\\r\\n    \'litcoffee\' => \'application\\/vnd.coffeescript\',\\r\\n    \'ts\'        => \'application\\/x-typescript\',\\r\\n    \'ini\'       => \'text\\/x-ini\',\\r\\n    \'ejs\'       => \'text\\/x-ejs\',\\r\\n    \'md\'        => \'text\\/markdown\',\\r\\n    \'sql\'       => \'application\\/x-perl\',\\r\\n);\\r\\n\\r\\n\\r\\n\\/** Adapt field\\/mime depending on event type **\\/\\r\\n$mimeType = false;\\r\\n$field = false;\\r\\n$mixedMode = true;\\r\\nswitch ($modx->event->name) {\\r\\n    case \'OnSnipFormPrerender\':\\r\\n        \\/\\/ Snippets are PHP\\r\\n        $field = \'modx-snippet-snippet\';\\r\\n        $mimeType = \'application\\/x-php\';\\r\\n        $mixedMode = false;\\r\\n        break;\\r\\n    case \'OnTempFormPrerender\':\\r\\n        \\/\\/ Templates are HTML\\r\\n        $field = \'modx-template-content\';\\r\\n        $mimeType = \'text\\/html\';\\r\\n        $mixedMode = true;\\r\\n        break;\\r\\n    case \'OnChunkFormPrerender\':\\r\\n        \\/\\/ Chunks are HTML\\r\\n        \\/\\/ unless it is static then we look at the file extension\\r\\n        \\/\\/ unless it a proper mime type is set in description or first line of chunk!\\r\\n        $field = \'modx-chunk-snippet\';\\r\\n        $mixedMode = true;\\r\\n        \\r\\n        if ($modx->controller->chunk) {\\r\\n            \\/** Try to detect shebang **\\/\\r\\n            if ($AceChunkDetectMIMEShebang) {\\r\\n                \\/\\/ Retrieve description\\r\\n                $chunkDescription = $modx->controller->chunk->get(\'description\');\\r\\n                \\/\\/ Retrieve first line of chunk content\\r\\n                $chunkContentFirstLine = strtok($modx->controller->chunk->getContent(), \\"\\\\n\\");\\r\\n                \\/\\/ Loop through known mime\\r\\n                foreach($mimeTypeToMode as $currMimeType => $mode) {\\r\\n                    if (strpos($chunkDescription, $currMimeType) !== FALSE || \\r\\n                        strpos($chunkContentFirstLine, $currMimeType) !== FALSE) \\r\\n                    {\\r\\n                        $mimeType = $currMimeType;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            \\/** For static file, try to detect through file extension **\\/\\r\\n            if (!$mimeType && $modx->controller->chunk->isStatic()) {\\r\\n                $extension = pathinfo($modx->controller->chunk->getSourceFile(), PATHINFO_EXTENSION);\\r\\n                $mimeType = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/* Default to HTML *\\/\\r\\n        if (!$mimeType) {\\r\\n            $mimeType = \'text\\/html\';\\r\\n        }\\r\\n        \\r\\n        break;\\r\\n    case \'OnPluginFormPrerender\':\\r\\n        \\/\\/ Plugins are PHP\\r\\n        $field = \'modx-plugin-plugincode\';\\r\\n        $mimeType = \'application\\/x-php\';\\r\\n        $mixedMode = false;\\r\\n        break;\\r\\n    case \'OnFileCreateFormPrerender\':\\r\\n        \\/\\/ On file creation, use plain text\\r\\n        $field = \'modx-file-content\';\\r\\n        $mimeType = \'text\\/plain\';\\r\\n        $mixedMode = true;\\r\\n        break;\\r\\n    case \'OnFileEditFormPrerender\':\\r\\n        \\/\\/ For file editing, we look at the file extension\\r\\n        $field = \'modx-file-content\';\\r\\n        \\/\\/ Identify mime type according to extension\\r\\n        $extension = pathinfo($scriptProperties[\'file\'], PATHINFO_EXTENSION);\\r\\n        $mimeType = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\r\\n        $mixedMode = true;\\r\\n        break;\\r\\n    case \'OnDocFormPrerender\':\\r\\n        \\/\\/ For document, we look at the content type\\r\\n        \\/\\/ But we wont show anything if another RTE is set (e.g. CKEditor or TinyMCE)\\r\\n        if (!$modx->controller->resourceArray) {\\r\\n            return;\\r\\n        }\\r\\n        if ($modx->getOption(\'use_editor\')) {\\r\\n            $richText = $modx->controller->resourceArray[\'richtext\'];\\r\\n            $classKey = $modx->controller->resourceArray[\'class_key\'];\\r\\n            if ($richText || in_array($classKey, array(\'modStaticResource\',\'modSymLink\',\'modWebLink\',\'modXMLRPCResource\'))) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        $field = \'ta\';\\r\\n        $mimeType = $modx->getObject(\'modContentType\', $modx->controller->resourceArray[\'content_type\'])->get(\'mime_type\');\\r\\n        $mixedMode = true;\\r\\n        break;\\r\\n    default:\\r\\n        return;\\r\\n}\\r\\n\\r\\n\\/** If field found, include the javascript code to load Ace **\\/\\r\\nif ($field) {\\r\\n    \\/\\/ Get corresponding Ace mode according to mime type\\r\\n    $mode = isset($mimeTypeToMode[$mimeType]) ? $mimeTypeToMode[$mimeType] : \'text\';\\r\\n    \\r\\n    \\/\\/ Handle mixed mode\\r\\n    if ($mixedMode == true) {\\r\\n        \\/\\/ Mixed mode, set needed files and functions \\r\\n        \\r\\n        array_push($scriptPaths, \\"$AceAssetsUrl\\/modx_highlight_rules.js\\");\\r\\n        \\r\\n        $setModeScript = <<<JSSCRIPT\\r\\n            \\/** \\r\\n             * Function to create a mixed mode with MODX tags\\r\\n             * Based on the work of danyaPostfactum, see link below\\r\\n             * https:\\/\\/github.com\\/danyaPostfactum\\/modx-ace\\/blob\\/master\\/assets\\/components\\/ace\\/modx.texteditor.js\\r\\n             *\\/\\r\\n            var createModxMixedMode = function(Mode) {\\r\\n                var oop = ace.require(\\"ace\\/lib\\/oop\\");\\r\\n                \\r\\n                \\/* Create the new mixed mode *\\/\\r\\n                var ModxMixedMode = function() {\\r\\n                    Mode.call(this);\\r\\n                    \\r\\n                    \\/\\/ Save the parent rules to be able to call them later\\r\\n                    var parentHighlightRules = this.HighlightRules;\\r\\n                    \\r\\n                    \\/* Create the new mixed rules *\\/\\r\\n                    var mixedHighlightRules = function() {\\r\\n                        \\/\\/ Set parent rules\\r\\n                        parentHighlightRules.call(this);\\r\\n                        \\r\\n                        \\/\\/ Set modx rules (function available in file modx_highlight_rules.js already loaded)\\r\\n                        modxCustomHighlightRules.call(this);\\r\\n                        \\r\\n                        \\/\\/ Normalized!\\r\\n                        this.normalizeRules();\\r\\n                    }\\r\\n                    \\r\\n                    \\/\\/ Inherit prototype from parent rules\\r\\n                    oop.inherits(mixedHighlightRules, parentHighlightRules);\\r\\n                    \\r\\n                    \\/\\/ Set mixed highlight rules\\r\\n                    this.HighlightRules = mixedHighlightRules;\\r\\n                }\\r\\n                \\r\\n                \\/\\/ Inherit prototype from parent Mode\\r\\n                oop.inherits(ModxMixedMode, Mode);\\r\\n                \\r\\n                \\/\\/ Handle the case were a worker is defined in parent mode\\r\\n                if (Mode.prototype.createWorker) {\\r\\n                    ModxMixedMode.prototype.createWorker = function(session) {\\r\\n                        \\/\\/ Call parent without \'this\'\\r\\n                        var worker = Mode.prototype.createWorker(session);\\r\\n                        if (worker) {\\r\\n                            \\/\\/ Replace onError function to handle modx tag\\r\\n                            worker.on(\\"error\\", function(e) {\\r\\n                                var annotations = [];\\r\\n                                var idx_max = e.data.length;\\r\\n                                \\/\\/ Loop through errors, and silence errors when a modx tag [[ exists\\r\\n                                for(var i = 0 ; i < idx_max ; i++) {\\r\\n                                    \\/\\/ Get line\\r\\n                                    var line = session.getLine(e.data[i].row);\\r\\n                                    if (line.indexOf(\'[[\') === -1) {\\r\\n                                        \\/\\/ No modx tag, add to annotations\\r\\n                                        annotations.push(e.data[i]);\\r\\n                                    }\\r\\n                                }\\r\\n                                session.setAnnotations(annotations);\\r\\n                            });\\r\\n                        }\\r\\n                        return worker;\\r\\n                    };\\r\\n                }\\r\\n                \\r\\n                \\/\\/ We\'re done. Return the new mixed mode\\r\\n                return new ModxMixedMode();\\r\\n            };\\r\\n            \\r\\n            \\/** \\r\\n             * Function to set a mixed mode\\r\\n             *\\/\\r\\n            var setMixedMode = function(editor, mode) {\\r\\n                var config = ace.require(\'ace\\/config\');\\r\\n                config.loadModule([\\"mode\\", \'ace\\/mode\\/\' + mode], function(module) {\\r\\n                    var mode = createModxMixedMode(module.Mode);\\r\\n                    editor.session.setMode(mode);\\r\\n                }.bind(this));\\r\\n            }\\r\\n                \\r\\n            setMixedMode(editor, \\"{$mode}\\");\\r\\nJSSCRIPT;\\r\\n\\r\\n    } else {\\r\\n        \\/\\/ No mixed mode, simply set mode\\r\\n        $setModeScript = \\"editor.session.setMode(\'ace\\/mode\\/{$mode}\');\\";\\r\\n    }\\r\\n    \\r\\n    \\/\\/ Convert options to JSON object\\r\\n    $editorOptions = json_encode($editorOptions, JSON_FORCE_OBJECT);\\r\\n    $rendererOptions = json_encode($rendererOptions, JSON_FORCE_OBJECT);\\r\\n    \\r\\n    \\/\\/ Generate cache busting query string\\r\\n    \\/\\/ Based on current plugin version + hash of all properties\\r\\n    $propertiesHash = md5(\\"$AcePath $EmmetPath $AceTheme $AceReplaceCTRLDKbdShortcut $AceAutocompletion $AceSettingsMenu $AceSpellcheck $AceEmmet $AceChunkDetectMIMEShebang\\");\\r\\n    $CacheBustingQSValue = \\"?v=$pluginVersion-$propertiesHash\\";\\r\\n\\r\\n    \\/\\/ Generate final script!\\r\\n    $script = \\"\\";\\r\\n    foreach($scriptPaths as $scriptPath) {\\r\\n        \\/\\/ Include file\\r\\n        $script .= \\"<script src=\'$scriptPath$CacheBustingQSValue\' type=\'text\\/javascript\' charset=\'utf-8\'><\\/script>\\\\n\\";\\r\\n    }\\r\\n    \\r\\n    \\/\\/ The script...\\r\\n    $script .= <<<JSSCRIPT\\r\\n<script type=\\"text\\/javascript\\">\\r\\n    (function() {\\r\\n        \\"use strict\\";\\r\\n    \\r\\n        \\/\\/ Max number of tries\\r\\n        var MAX_TRIES = 10;\\r\\n        \\r\\n        \\/\\/ Time in ms to wait between each tries\\r\\n        var WAIT_BETWEEN_TRIES_MS = 100;\\r\\n        \\r\\n        \\/\\/ Hold the current try number\\r\\n        var currentTry = 0;\\r\\n        \\r\\n        \\/\\/ Will hold the textarea DOM element\\r\\n        var textarea;\\r\\n        \\r\\n        \\/\\/ Useful dom lib\\r\\n        var dom = ace.require(\\"ace\\/lib\\/dom\\");\\r\\n        \\r\\n        \\/** \\r\\n         * Function Init ACE editor\\r\\n         * Uses textarea variable\\r\\n         *\\/\\r\\n        var initAceCodeEditor = function() {\\r\\n            \\/\\/ Set parent element to relative position\\r\\n            \\/\\/ Hence the Ace Editor div absolute positionning will be relative to it\\r\\n            textarea.parentNode.style.position = \'relative\';\\r\\n            \\r\\n            \\/\\/ Create div element for Ace\\r\\n            var aceEditorDiv = document.createElement(\\"div\\");\\r\\n            setEditorSize(aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Append to DOM before the textarea\\r\\n            textarea.parentNode.insertBefore(aceEditorDiv, textarea);\\r\\n            \\r\\n            \\/\\/ Hide textarea\\r\\n            textarea.style.visibility = \'hidden\';\\r\\n            \\r\\n            \\/\\/ Create Ace editor !\\r\\n            var editor = ace.edit(aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Additional scripts\\r\\n            {$editorAdditionalScript}\\r\\n            \\r\\n            \\/\\/ Fullscreen toggle support\\r\\n            editor.commands.addCommand({\\r\\n                name: \\"Toggle Fullscreen\\",\\r\\n                bindKey: \\"F11\\",\\r\\n                exec: function(editor) {\\r\\n                    \\/\\/ Toggle class\\r\\n                    dom.toggleCssClass(editor.container, \\"fullScreen\\");\\r\\n                    \\/\\/ Get current situation\\r\\n                    var isFullScreen = dom.hasCssClass(editor.container, \\"fullScreen\\");\\r\\n                    \\/\\/ Set size and resize as needed\\r\\n                    setEditorSize(editor.container, isFullScreen);\\r\\n                    editor.resize();\\r\\n                    \\/\\/ Handle searchbox position as needed\\r\\n                    handleSearchBoxPosition(editor, isFullScreen);\\r\\n                }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Search while fullscreen support\\r\\n            editor.commands.addCommand({\\r\\n                name: \'CustomFind\',\\r\\n                bindKey: {win: \'Ctrl-F\', mac: \'Command-F\'},\\r\\n                exec: function(editor) { handleSearchBox(editor); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Replace while fullscreen support\\r\\n            editor.commands.addCommand({\\r\\n                name: \'CustomReplace\',\\r\\n                bindKey: {win: \'Ctrl-H\', mac: \'Command-Option-F\'},\\r\\n                exec: function(editor) { handleSearchBox(editor, true); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Additionnal Replace command\\r\\n            editor.commands.addCommand({\\r\\n                name: \'additionnalReplace\',\\r\\n                bindKey: {win: \'Ctrl-R\', mac: \'Command-R\'},\\r\\n                exec: function(editor) { handleSearchBox(editor, true); }\\r\\n            });\\r\\n        \\r\\n            \\/\\/ Ace Editor settings\\r\\n            editor.setOptions({$editorOptions});\\r\\n            editor.renderer.setOptions({$rendererOptions});\\r\\n            \\r\\n            {$setModeScript}\\r\\n            \\r\\n            editor.getSession().setValue(textarea.value);\\r\\n            \\r\\n            \\/\\/ Keep Ace and textarea synchronized\\r\\n            editor.on(\\"change\\", function() {\\r\\n                textarea.value = editor.getSession().getValue();\\r\\n            });\\r\\n            \\r\\n        }\\r\\n        \\r\\n        \\/** \\r\\n         * Function search for the textarea\\r\\n         * Recursive function\\r\\n         * If textarea is not found, wait a bit and search again\\r\\n         *\\/\\r\\n        var tryToGetTextArea = function() {\\r\\n            \\/\\/ Try to find the textarea\\r\\n            textarea = document.getElementById(\\"{$field}\\");\\r\\n            \\r\\n            if (textarea) {\\r\\n                \\/\\/ Element found, init!\\r\\n                initAceCodeEditor(textarea);\\r\\n            } else {\\r\\n                \\/\\/ Damn, not found. Wait a bit and try again\\r\\n                setTimeout(function() {\\r\\n                    currentTry++;\\r\\n                    if (currentTry <= MAX_TRIES) {\\r\\n                        tryToGetTextArea();\\r\\n                    }\\r\\n                }, WAIT_BETWEEN_TRIES_MS);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/** \\r\\n         * Function to set editor size between fullscreen or not\\r\\n         *\\/\\r\\n        var setEditorSize = function(editorContainer, isFullScreen) {\\r\\n            if (isFullScreen) {\\r\\n                editorContainer.style.position = \'fixed\';\\r\\n                editorContainer.style.top = \'55px\';\\r\\n                editorContainer.style.bottom = \'0\';\\r\\n                editorContainer.style.left = \'0\';\\r\\n                editorContainer.style.right = \'0\';\\r\\n                editorContainer.style[\'z-index\'] = \'10\'; \\/\\/ Top right menu has z-index of 11\\r\\n                \\r\\n                editorContainer.style.width = null;\\r\\n                editorContainer.style.height = null;\\r\\n            } else {\\r\\n                editorContainer.style.position = \'absolute\';\\r\\n                editorContainer.style.width = \'100%\';\\r\\n                editorContainer.style.height = \'100%\';\\r\\n                \\r\\n                editorContainer.style.top = null;\\r\\n                editorContainer.style.bottom = null;\\r\\n                editorContainer.style.left = null;\\r\\n                editorContainer.style.right = null;\\r\\n                editorContainer.style[\'z-index\'] = null;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle searchbox (show\\/hide)\\r\\n         *\\/\\r\\n        var handleSearchBox = function(editor, isReplace) {\\r\\n            \\/\\/ Load extension\\r\\n            ace.config.loadModule(\\"ace\\/ext\\/searchbox\\", function(e) {\\r\\n                \\/\\/ Launch searchbox\\r\\n                e.Search(editor, isReplace);\\r\\n                \\/\\/ Handle searchbox position\\r\\n                handleSearchBoxPosition(editor, dom.hasCssClass(editor.container, \\"fullScreen\\"));\\r\\n            });\\r\\n        }\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle searchbox position depending on fullscreen or not\\r\\n         *\\/\\r\\n        var handleSearchBoxPosition = function(editor, isFullScreen) {\\r\\n            if (!editor.searchBox) return;\\r\\n            \\r\\n            if (isFullScreen) {\\r\\n                \\/\\/ If fullscreen, put searchbox on bottom\\r\\n                editor.searchBox.element.style.top = \'auto\';\\r\\n                editor.searchBox.element.style.bottom = \'0\';\\r\\n            } else {\\r\\n                \\/\\/ If not, unset any specific style value previously set\\r\\n                editor.searchBox.element.style.top = null;\\r\\n                editor.searchBox.element.style.bottom = null;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/\\/ Start searching!\\r\\n        tryToGetTextArea();\\r\\n    })();\\r\\n<\\/script>\\r\\nJSSCRIPT;\\r\\n\\r\\n    $modx->controller->addHtml($script);\\r\\n}"}',
);